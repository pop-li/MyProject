<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  horizontalAlign="center" verticalAlign="middle"
		  creationComplete="creationCompleteHandler(event)"
		  >
	
	<fx:Script>
		<![CDATA[
			import com.greensock.TweenLite;
			import com.greensock.easing.Strong;
			
			import flash.utils.getTimer;
			
			import mx.events.FlexEvent;
			
			import model.ModelLocator;
			
			import vos.ShoesVO;
			
			private var _model:ModelLocator = ModelLocator.getInstance();
			
			/**
			 * 该类商品的所有商品列表
			 */
			private var _shoesArr:Vector.<Shoes>=new Vector.<Shoes>();
			/**
			 * 当前聚焦的产品在所有产品中的索引位置
			 */
			private var _focusShoeIndex:int = 0;
			
			private var leftIndex:int=0;
			private var rightIndex:int=0;
			private var _preX:int;
			private var _curX:int;
			private var _preT:int;
			private var _curT:int;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				productList.width = _model.screenWidth;
				productList.height = _model.screenHeight;
				
				var initCount:int = _focusShoeIndex + Math.ceil(_model.showCount4Stage/2);
				for(var i:int=0;i<_model.showCount4Stage;i++) { //同屏显示个数
					var shoeVO:ShoesVO = new ShoesVO();
					shoeVO.shoeImagSource = "/assets/shoes/" + (i+1) + ".png";
					var shoe:Shoes=new Shoes();
					shoe.data = shoeVO;
					_shoesArr.push(shoe);
					
//					shoe.scaleX = _model.SHOES_SCALE;
//					shoe.scaleY = _model.SHOES_SCALE;
//					shoe.x = calculateX(i);
//					shoe.y = productList.height/2;
//					productList.addElementAt(shoe,0);
					
					if(i<initCount) {
						addShoeToStage(i);
					}
				}
				
			}
			
			/**
			 * 将指定产品添加到舞台
			 * @param shoe要添加到舞台的指定产品的索引
			 */
			protected function addShoeToStage(index:int):Shoes
			{
				if(index<0||index>_shoesArr.length-1) return null; //如果超出范围，则直接return
				
				
				if(index==this._focusShoeIndex) {
				} else {
					if(index>this._focusShoeIndex) {
						rightIndex = index;
					} else {
						leftIndex = index;
					}
					_shoesArr[index].scaleX = _model.shoesScale;
					_shoesArr[index].scaleY = _model.shoesScale;
				}
				
				_shoesArr[index].x = calculateExpectX(index);
				_shoesArr[index].y = productList.height/2;
				return productList.addElementAt(_shoesArr[index],0) as Shoes;
			}
			/**
			 * 讲指定的产品从舞台删除
			 * 
			 * @param shoe要从舞台删除的指定产品的索引
			 */
			protected function removeShoeFromStage(index:int):Shoes
			{
				if(index<0||index>_shoesArr.length-1) return null; //如果超出范围，则直接return
				
				if(index>this._focusShoeIndex) {
					rightIndex --;
				} else {
					leftIndex ++;
				}
				return productList.removeElement(_shoesArr[index]) as Shoes;
			}
			/**
			 * 将产品聚焦中央
			 * @param shoe要聚焦的产品的索引
			 */
			protected function makeFocusShoe(index:int):void
			{
				if(index<0||index>_shoesArr.length-1) return; //如果超出范围，则直接return
				
				TweenLite.to(this._shoesArr[index], 0.7, {scaleX:1,scaleY:1, ease:Strong.easeOut});
				TweenLite.to(this._shoesArr[this._focusShoeIndex], 0.7, {scaleX:_model.shoesScale,scaleY:_model.shoesScale, ease:Strong.easeOut});
				this._focusShoeIndex = index;
				productList.setElementIndex(this._shoesArr[index],productList.numChildren-1);
			}
			
//			protected function calculateX(index:int):int
//			{
//				var _distance:int=index-this._focusShoeIndex;
//				if(0==_distance) {
//					return this._shoesArr[_focusShoeIndex].x;
//				} else {
//					if(_distance<0) {
//						return this._shoesArr[_focusShoeIndex].x - _model.focusShoeSpace + (_distance-1)*_model.unfocusShoeSpace;
//					} else {
//						return this._shoesArr[_focusShoeIndex].x + _model.focusShoeSpace + (_distance-1)*_model.unfocusShoeSpace;
//					}
//				}
//			}
			
			protected function calculateExpectX(index:int):int
			{
				var _distance:int=index-this._focusShoeIndex;
				if(0==_distance) {
					return _model.screenWidth/2;
				} else {
					if(_distance<0) {
						return _model.screenWidth/2 - _model.focusShoeSpace - _model.focusShoeSpace/_model.focusDividedUnfocusSpeed - (-_distance-1)*_model.unfocusShoeSpace;
					} else {
						return _model.screenWidth/2 + _model.focusShoeSpace + _model.focusShoeSpace/_model.focusDividedUnfocusSpeed + (_distance-1)*_model.unfocusShoeSpace;
					}
				}
			}
			
			protected function touchBeginHandler(event:TouchEvent):void
			{
				event.stopImmediatePropagation();
				
				//结束当前的效果
				for(var i:int=leftIndex;i<=rightIndex;i++) { //同屏显示5个
					TweenLite.killTweensOf(_shoesArr[i]);
				}
				//记录开始触摸屏幕时的坐标和时间点
				_curX = _preX = this.mouseX;
				_curT = _preT = getTimer();
//				productList.startDrag(false, new Rectangle(productList.x-9999, productList.y, 9999999, 0));
				//注意：这里是监听整个舞台的手离开屏幕事件
				this.stage.addEventListener(TouchEvent.TOUCH_END, touchEndHandler, false, 0, true);
				productList.addEventListener(Event.ENTER_FRAME, enterFrameHandler, false, 0, true);
			}
			
			protected function touchEndHandler(event:TouchEvent):void
			{
//				productList.stopDrag();
				productList.removeEventListener(Event.ENTER_FRAME, enterFrameHandler);
				this.stage.removeEventListener(TouchEvent.TOUCH_END, touchEndHandler);
				var elapsedTime:Number = (getTimer() - _preT) / 1000;
				var xVelocity:Number = (this.mouseX - _preX) / elapsedTime;
				
				for(var i:int=leftIndex;i<=rightIndex;i++) { //同屏显示5个
					
					TweenLite.to(_shoesArr[i], 0.7, {x:calculateExpectX(i), ease:Strong.easeOut,overwrite:false});
				}
				//we make sure that the velocity is at least 20 pixels per second in either direction in order to advance. Otherwise, look at the position of the _container and if it's more than halfway into the next/previous panel, tween there.
//				if (_currentPanelIndex > 0 && (xVelocity > 20 || _container.x > (_currentPanelIndex - 0.5) * -_panelBounds.width + _panelBounds.x)) {
//					_currentPanelIndex--;
//				} else if (_currentPanelIndex < _panelCount - 1 && (xVelocity < -20 || _container.x < (_currentPanelIndex + 0.5) * -_panelBounds.width + _panelBounds.x)) {
//					_currentPanelIndex++;
//				}
//				TweenLite.to(productList, 0.7, {x:_currentPanelIndex * -_panelBounds.width + _panelBounds.x, ease:Strong.easeOut});
			}
			
			protected function enterFrameHandler(event:Event):void
			{
				_preX = _curX;
				_preT = _curT;
				_curX = this.mouseX;
				_curT = getTimer();
				
				if(_curX==_preX) return;
				var _distanceX:int = (_curX-_preX)*_model.focusDividedTouchSpeed; //计算手势移动的位移在实际效果中移动多少
				
				_distanceX=Math.min(_model.focusShoeSpace*2,_distanceX);
				
				var count:int = _shoesArr.length;
				var l:int=0;
					
				for(var i:int=_focusShoeIndex;i<=rightIndex;i+=l) {
					/**
					 //0.判断是否为聚焦商品
					 //--1.若为聚焦商品，则区分向左还是向右拖动
					 //----2.若从左向右，则判断是否跨越了聚焦区域右断点
					 //------3.没有跨越聚焦区域的右侧端点
					 //--------fomula : 聚焦商品移动位移=移动位移×卷轴移动倍数
					 //------3.跨越了聚焦区域的右侧端点，则判断当前聚焦商品是否为最右侧
					 //--------4.若为最左侧，
					 //----------fomula : 聚焦商品移动位移=移动位移×卷轴移动倍数
					 //--------4.否则代表向右跨越右侧聚焦区域断点
					 //----------fomula : 聚焦商品移动位移=跨越之前的移动位移×卷轴移动倍数+跨越之后的移动位移
					 //----------fomula : 聚焦商品左侧的前一个非聚焦商品移动位移=跨越之前的移动位移+跨越之后的移动位移×卷轴移动倍数
					 //----2.若从右向左，则判断是否跨越了聚焦区域左断点
					 //------3.没有跨越聚焦区域的左侧端点
					 //----------fomula : 聚焦商品移动位移=移动位移×卷轴移动倍数
					 //------3.跨越了聚焦区域的左侧端点，则判断当前聚焦商品是否为最右侧
					 //--------4.若为最右侧，
					 //----------fomula : 聚焦商品移动位移=移动位移×卷轴移动倍数
					 //--------4.否则代表向右跨越右侧聚焦区域断点
					 //----------fomula : 聚焦商品移动位移=跨越之前的移动位移×卷轴移动倍数+跨越之后的移动位移
					 //----------fomula : 聚焦商品左侧的前一个非聚焦商品移动位移=跨越之前的移动位移+跨越之后的移动位移×卷轴移动倍数
					 //0.判断是否为聚焦商品
					 //--1.若不为聚焦商品
					 //----fomula : 非聚焦商品移动位移=移动位移
					 **/
					 //0.判断是否为聚焦商品
					if(i==_focusShoeIndex) { //--1.若为聚焦商品，则区分向左还是向右拖动
						var prePoint:int = _shoesArr[i].x;
						var destionationX:int = _shoesArr[i].x + _distanceX*_model.focusDividedUnfocusSpeed;
						
						if(_distanceX>0) { //----2.若从左向右，则判断是否跨越了聚焦区域右断点
							if(destionationX<_model.screenWidth/2+_model.focusShoeSpace) { //------3.没有跨越聚焦区域的右侧端点
								 //--------fomula : 聚焦商品移动位移=移动位移×卷轴移动倍数
								_shoesArr[i].x = destionationX;
								trace("move to   _distanceX " + _distanceX + " * _model.focusDividedUnfocusSpeed" + _model.focusDividedUnfocusSpeed);
							} else { //------3.跨越了聚焦区域的右侧端点，则判断当前聚焦商品是否为最右侧
								if(i==leftIndex) { //--------4.若为最左侧，
									 //----------fomula : 聚焦商品移动位移=移动位移×卷轴移动倍数
									trace("leftest   toX " + destionationX + "  fromX " + _shoesArr[i].x + " + _distanceX " + _distanceX + "  *    _model.focusDividedUnfocusSpeed " + _model.focusDividedUnfocusSpeed);
									_shoesArr[i].x = destionationX;
								} else { //--------4.否则代表向右跨越右侧聚焦区域断点
									 //----------fomula : 聚焦商品移动位移=跨越之前的移动位移×卷轴移动倍数+跨越之后的移动位移(此处是将多计算出来的部分剪掉)
									_shoesArr[i].x += _distanceX*_model.focusDividedUnfocusSpeed - (destionationX-_model.screenWidth/2-_model.focusShoeSpace)/_model.focusDividedUnfocusSpeed;
									 //----------fomula : 聚焦商品左侧的前一个非聚焦商品移动位移=跨越之前的移动位移+跨越之后的移动位移×卷轴移动倍数(此处仅计算多余移动的部分，后面遍历时会再计算正常移动的位移)
									_shoesArr[i-1].x += ((destionationX-_model.screenWidth/2-_model.focusShoeSpace)/_model.focusDividedUnfocusSpeed)*(_model.focusDividedUnfocusSpeed-1);//*_model.focusDividedUnfocusSpeed + (_model.screenWidth/2+_model.focusShoeSpace-_shoesArr[i].x);
									addShoeToStage(i-3);
									removeShoeFromStage(i+2);
									trace("from left change To right unfocus  " + _shoesArr[i].x);
								}
							}
						} else { //----2.若从右向左，则判断是否跨越了聚焦区域左断点
							if(destionationX>_model.screenWidth/2-_model.focusShoeSpace) { //------3.没有跨越聚焦区域的左侧端点
								 //----------fomula : 聚焦商品移动位移=移动位移×卷轴移动倍数
								_shoesArr[i].x = destionationX;
								trace("move to   _distanceX " + _distanceX + " * _model.focusDividedUnfocusSpeed" + _model.focusDividedUnfocusSpeed);
							} else { //------3.跨越了聚焦区域的左侧端点，则判断当前聚焦商品是否为最右侧
								if(i==rightIndex) { //--------4.若为最右侧，
									 //----------fomula : 聚焦商品移动位移=移动位移×卷轴移动倍数
									trace("rightest   toX " + destionationX + "  fromX " + _shoesArr[i].x + " + _distanceX " + _distanceX + "  *    _model.focusDividedUnfocusSpeed " + _model.focusDividedUnfocusSpeed);
									_shoesArr[i].x = destionationX;
								} else { //--------4.否则代表向左跨越左侧聚焦区域断点
									 //----------fomula : 聚焦商品移动位移=跨越之前的移动位移×卷轴移动倍数+跨越之后的移动位移(此处是将多计算出来的部分剪掉)
									_shoesArr[i].x -= -_distanceX*_model.focusDividedUnfocusSpeed - (_model.screenWidth/2-_model.focusShoeSpace-destionationX)/_model.focusDividedUnfocusSpeed;
									 //----------fomula : 聚焦商品左侧的前一个非聚焦商品移动位移=跨越之前的移动位移+跨越之后的移动位移×卷轴移动倍数(此处仅计算多余移动的部分，后面遍历时会再计算正常移动的位移)
									_shoesArr[i+1].x -= ((_model.screenWidth/2-_model.focusShoeSpace-destionationX)/_model.focusDividedUnfocusSpeed)*(_model.focusDividedUnfocusSpeed-1);//*_model.focusDividedUnfocusSpeed + (_shoesArr[i].x-_model.screenWidth/2+_model.focusShoeSpace);
									addShoeToStage(this._focusShoeIndex+3);
									removeShoeFromStage(this._focusShoeIndex-2);
									trace("from right change To left unfocus  " + _shoesArr[i].x);
								}
							}
						}
					} else { //--1.若不为聚焦商品
						trace("move to   _distanceX " + _distanceX);
						//----fomula : 非聚焦商品移动位移=移动位移
						_shoesArr[i].x += _distanceX;
					}
					
					if(i==leftIndex) {
						i=_focusShoeIndex;
						l=1;
					} else {
						if(i==_focusShoeIndex) {
							l=-1;
						}
					}
				}
				
				//??每次都执行
				if(_shoesArr[this._focusShoeIndex].x>_model.screenWidth/2 + _model.focusShoeSpace) { //如果向右拖动到位置，聚焦商品换为上一个
					if(this._focusShoeIndex-1<0) return; //如果已经到边缘，则直接return
					makeFocusShoe(this._focusShoeIndex-1);
//					addShoeToStage(this._focusShoeIndex-2);
//					removeShoeFromStage(this._focusShoeIndex+3);
					trace("-----------------------change focus toLeft--------------------");
				} else if(_shoesArr[this._focusShoeIndex].x<_model.screenWidth/2 - _model.focusShoeSpace) { //如果向左拖动到位置，聚焦商品换为下一个
					if(this._focusShoeIndex == _shoesArr.length-1) return; //如果已经到边缘，则直接return
					makeFocusShoe(this._focusShoeIndex+1);
//					addShoeToStage(this._focusShoeIndex+2);
//					removeShoeFromStage(this._focusShoeIndex-3);
					trace("-----------------------change focus toRight --------------------");
				}
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<!--<s:Label text="DetailPage" fontSize="50" />-->
	
	
	<!--<s:Scroller width="480" height="320" pageScrollingEnabled="true" >
		<s:HGroup width="100%" height="100%">
			<s:Image source="assets/shoes/1.png"  />
			<s:Image source="assets/shoes/2.png"  />
			<s:Image source="assets/shoes/3.png" />
			<s:Image source="assets/shoes/4.png"  />
			<s:Image source="assets/shoes/5.png"  />
		</s:HGroup>
	</s:Scroller>-->
	<s:Group id="productList" width="100%" height="100%"
			 touchBegin="touchBeginHandler(event)" >
		
	</s:Group>
</s:VGroup>
